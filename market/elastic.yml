services:
  es-setup:
    container_name: es-setup
    restart: none
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    volumes:
      - elastic_certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: elastic\n"\
          "    dns:\n"\
          "      - elastic\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://elastic:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:trustno1" -H "Content-Type: application/json" https://elastic:9200/_security/user/kibana_system/_password -d "{\"password\":\"trustno1\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/elastic/elastic.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - local-default
  
  elastic:
    container_name: elastic
    restart: always
    depends_on:
      es-setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:8.14.3
    volumes:
      - elastic_certs:/usr/share/elasticsearch/config/certs
      - elastic_data:/usr/share/elasticsearch/data
    ports:
      - 9280:9200
    environment:
      - discovery.type=single-node
      - node.name=elastic
      - ELASTIC_PASSWORD=trustno1
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/elastic/elastic.key
      - xpack.security.http.ssl.certificate=certs/elastic/elastic.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/elastic/elastic.key
      - xpack.security.transport.ssl.certificate=certs/elastic/elastic.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=basic
      - ES_JAVA_OPTS=-Xms1024m -Xmx1024m
    mem_limit: 2g
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - local-default
  
  kibana:
    container_name: kibana
    restart: always
    image: docker.elastic.co/kibana/kibana:8.14.3
    depends_on:
      elastic:
        condition: service_healthy
    volumes:
      - elastic_certs:/usr/share/kibana/config/certs
      - kibana_data:/usr/share/kibana/data
    ports:
      - 5681:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://elastic:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=trustno1
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    #mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - local-default
  
  prometheus:
    container_name: prometheus
    restart: always
    image: prom/prometheus:v3.1.0
    volumes:
      - ./elastic/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - local-default
  
  otel-collector:
    container_name: otel-collector
    restart: always
    image: otel/opentelemetry-collector-contrib:0.118.0
    volumes:
      - ./output:/etc/output:rw
      - ./elastic/otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml
    ports:
      - 1888:1888 # pprof extension
      - 8888:8888 # Prometheus metrics exposed by the Collector
      - 8889:8889 # Prometheus exporter metrics
      - 13133:13133 # health_check extension
      - 4318:4318 # OTLP http receiver
      - 55679:55679 # zpages extension
    depends_on:
      - prometheus
      - elastic
    networks:
      - local-default
  
  apm-server:
    container_name: apm-server
    restart: always
    image: docker.elastic.co/apm/apm-server:8.14.3
    ports:
      - 8200:8200
    volumes:
      - elastic_certs:/usr/share/apm-server/config/certs:ro
      - ./elastic/apm-server.yaml:/usr/share/apm-server/apm-server.yml:ro
      - ./elastic/apm-server/log:/var/log/apm-server:rw
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    command: >
      apm-server -e
        -E apm-server.rum.enabled=true
        -E output.elasticsearch.hosts=["https://elastic:9200"]
        -E output.elasticsearch.username=elastic
        -E output.elasticsearch.password=trustno1
        -E output.elasticsearch.ssl.certificate_authorities=["/usr/share/apm-server/config/certs/ca/ca.crt"]
        -E output.elasticsearch.ssl.verification_mode=full
    depends_on:
      - elastic
    networks:
      - local-default
  
volumes:
  elastic_certs:
  elastic_data:
  kibana_data:

networks:
  local-default:
    external: true
